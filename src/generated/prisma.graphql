# source: https://eu1.prisma.sh/mhamadaa1997-8af64d/sign_mohammed_alreai/dev
# timestamp: Sun Apr 26 2020 12:21:00 GMT+0300 (Israel Daylight Time)

type AggregateCatogory {
  count: Int!
}

type AggregateItem {
  count: Int!
}

type AggregateUser {
  count: Int!
}

type BatchPayload {
  """The number of nodes that have been affected by the Batch operation."""
  count: Long!
}

type Catogory implements Node {
  id: ID!
  items(where: ItemWhereInput, orderBy: ItemOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Item!]
  user: User
}

"""A connection to a list of items."""
type CatogoryConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [CatogoryEdge]!
  aggregate: AggregateCatogory!
}

input CatogoryCreateInput {
  id: ID
  items: ItemCreateManyWithoutCatogoryInput
  user: UserCreateOneWithoutCatogorysInput
}

input CatogoryCreateManyWithoutUserInput {
  create: [CatogoryCreateWithoutUserInput!]
  connect: [CatogoryWhereUniqueInput!]
}

input CatogoryCreateOneWithoutItemsInput {
  create: CatogoryCreateWithoutItemsInput
  connect: CatogoryWhereUniqueInput
}

input CatogoryCreateWithoutItemsInput {
  id: ID
  user: UserCreateOneWithoutCatogorysInput
}

input CatogoryCreateWithoutUserInput {
  id: ID
  items: ItemCreateManyWithoutCatogoryInput
}

"""An edge in a connection."""
type CatogoryEdge {
  """The item at the end of the edge."""
  node: Catogory!

  """A cursor for use in pagination."""
  cursor: String!
}

enum CatogoryOrderByInput {
  id_ASC
  id_DESC
}

type CatogoryPreviousValues {
  id: ID!
}

input CatogoryScalarWhereInput {
  """Logical AND on all given filters."""
  AND: [CatogoryScalarWhereInput!]

  """Logical OR on all given filters."""
  OR: [CatogoryScalarWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [CatogoryScalarWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
}

type CatogorySubscriptionPayload {
  mutation: MutationType!
  node: Catogory
  updatedFields: [String!]
  previousValues: CatogoryPreviousValues
}

input CatogorySubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [CatogorySubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [CatogorySubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [CatogorySubscriptionWhereInput!]

  """The subscription event gets dispatched when it's listed in mutation_in"""
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: CatogoryWhereInput
}

input CatogoryUpdateInput {
  items: ItemUpdateManyWithoutCatogoryInput
  user: UserUpdateOneWithoutCatogorysInput
}

input CatogoryUpdateManyWithoutUserInput {
  create: [CatogoryCreateWithoutUserInput!]
  connect: [CatogoryWhereUniqueInput!]
  set: [CatogoryWhereUniqueInput!]
  disconnect: [CatogoryWhereUniqueInput!]
  delete: [CatogoryWhereUniqueInput!]
  update: [CatogoryUpdateWithWhereUniqueWithoutUserInput!]
  deleteMany: [CatogoryScalarWhereInput!]
  upsert: [CatogoryUpsertWithWhereUniqueWithoutUserInput!]
}

input CatogoryUpdateOneWithoutItemsInput {
  create: CatogoryCreateWithoutItemsInput
  connect: CatogoryWhereUniqueInput
  disconnect: Boolean
  delete: Boolean
  update: CatogoryUpdateWithoutItemsDataInput
  upsert: CatogoryUpsertWithoutItemsInput
}

input CatogoryUpdateWithoutItemsDataInput {
  user: UserUpdateOneWithoutCatogorysInput
}

input CatogoryUpdateWithoutUserDataInput {
  items: ItemUpdateManyWithoutCatogoryInput
}

input CatogoryUpdateWithWhereUniqueWithoutUserInput {
  where: CatogoryWhereUniqueInput!
  data: CatogoryUpdateWithoutUserDataInput!
}

input CatogoryUpsertWithoutItemsInput {
  update: CatogoryUpdateWithoutItemsDataInput!
  create: CatogoryCreateWithoutItemsInput!
}

input CatogoryUpsertWithWhereUniqueWithoutUserInput {
  where: CatogoryWhereUniqueInput!
  update: CatogoryUpdateWithoutUserDataInput!
  create: CatogoryCreateWithoutUserInput!
}

input CatogoryWhereInput {
  """Logical AND on all given filters."""
  AND: [CatogoryWhereInput!]

  """Logical OR on all given filters."""
  OR: [CatogoryWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [CatogoryWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  items_every: ItemWhereInput
  items_some: ItemWhereInput
  items_none: ItemWhereInput
  user: UserWhereInput
}

input CatogoryWhereUniqueInput {
  id: ID
}

type Item implements Node {
  id: ID!
  title: String!
  image: String!
  user: User
  catogory: Catogory
}

"""A connection to a list of items."""
type ItemConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [ItemEdge]!
  aggregate: AggregateItem!
}

input ItemCreateInput {
  id: ID
  title: String!
  image: String!
  user: UserCreateOneInput
  catogory: CatogoryCreateOneWithoutItemsInput
}

input ItemCreateManyWithoutCatogoryInput {
  create: [ItemCreateWithoutCatogoryInput!]
  connect: [ItemWhereUniqueInput!]
}

input ItemCreateWithoutCatogoryInput {
  id: ID
  title: String!
  image: String!
  user: UserCreateOneInput
}

"""An edge in a connection."""
type ItemEdge {
  """The item at the end of the edge."""
  node: Item!

  """A cursor for use in pagination."""
  cursor: String!
}

enum ItemOrderByInput {
  id_ASC
  id_DESC
  title_ASC
  title_DESC
  image_ASC
  image_DESC
}

type ItemPreviousValues {
  id: ID!
  title: String!
  image: String!
}

input ItemScalarWhereInput {
  """Logical AND on all given filters."""
  AND: [ItemScalarWhereInput!]

  """Logical OR on all given filters."""
  OR: [ItemScalarWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [ItemScalarWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  title: String

  """All values that are not equal to given value."""
  title_not: String

  """All values that are contained in given list."""
  title_in: [String!]

  """All values that are not contained in given list."""
  title_not_in: [String!]

  """All values less than the given value."""
  title_lt: String

  """All values less than or equal the given value."""
  title_lte: String

  """All values greater than the given value."""
  title_gt: String

  """All values greater than or equal the given value."""
  title_gte: String

  """All values containing the given string."""
  title_contains: String

  """All values not containing the given string."""
  title_not_contains: String

  """All values starting with the given string."""
  title_starts_with: String

  """All values not starting with the given string."""
  title_not_starts_with: String

  """All values ending with the given string."""
  title_ends_with: String

  """All values not ending with the given string."""
  title_not_ends_with: String
  image: String

  """All values that are not equal to given value."""
  image_not: String

  """All values that are contained in given list."""
  image_in: [String!]

  """All values that are not contained in given list."""
  image_not_in: [String!]

  """All values less than the given value."""
  image_lt: String

  """All values less than or equal the given value."""
  image_lte: String

  """All values greater than the given value."""
  image_gt: String

  """All values greater than or equal the given value."""
  image_gte: String

  """All values containing the given string."""
  image_contains: String

  """All values not containing the given string."""
  image_not_contains: String

  """All values starting with the given string."""
  image_starts_with: String

  """All values not starting with the given string."""
  image_not_starts_with: String

  """All values ending with the given string."""
  image_ends_with: String

  """All values not ending with the given string."""
  image_not_ends_with: String
}

type ItemSubscriptionPayload {
  mutation: MutationType!
  node: Item
  updatedFields: [String!]
  previousValues: ItemPreviousValues
}

input ItemSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [ItemSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [ItemSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [ItemSubscriptionWhereInput!]

  """The subscription event gets dispatched when it's listed in mutation_in"""
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: ItemWhereInput
}

input ItemUpdateInput {
  title: String
  image: String
  user: UserUpdateOneInput
  catogory: CatogoryUpdateOneWithoutItemsInput
}

input ItemUpdateManyDataInput {
  title: String
  image: String
}

input ItemUpdateManyMutationInput {
  title: String
  image: String
}

input ItemUpdateManyWithoutCatogoryInput {
  create: [ItemCreateWithoutCatogoryInput!]
  connect: [ItemWhereUniqueInput!]
  set: [ItemWhereUniqueInput!]
  disconnect: [ItemWhereUniqueInput!]
  delete: [ItemWhereUniqueInput!]
  update: [ItemUpdateWithWhereUniqueWithoutCatogoryInput!]
  updateMany: [ItemUpdateManyWithWhereNestedInput!]
  deleteMany: [ItemScalarWhereInput!]
  upsert: [ItemUpsertWithWhereUniqueWithoutCatogoryInput!]
}

input ItemUpdateManyWithWhereNestedInput {
  where: ItemScalarWhereInput!
  data: ItemUpdateManyDataInput!
}

input ItemUpdateWithoutCatogoryDataInput {
  title: String
  image: String
  user: UserUpdateOneInput
}

input ItemUpdateWithWhereUniqueWithoutCatogoryInput {
  where: ItemWhereUniqueInput!
  data: ItemUpdateWithoutCatogoryDataInput!
}

input ItemUpsertWithWhereUniqueWithoutCatogoryInput {
  where: ItemWhereUniqueInput!
  update: ItemUpdateWithoutCatogoryDataInput!
  create: ItemCreateWithoutCatogoryInput!
}

input ItemWhereInput {
  """Logical AND on all given filters."""
  AND: [ItemWhereInput!]

  """Logical OR on all given filters."""
  OR: [ItemWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [ItemWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  title: String

  """All values that are not equal to given value."""
  title_not: String

  """All values that are contained in given list."""
  title_in: [String!]

  """All values that are not contained in given list."""
  title_not_in: [String!]

  """All values less than the given value."""
  title_lt: String

  """All values less than or equal the given value."""
  title_lte: String

  """All values greater than the given value."""
  title_gt: String

  """All values greater than or equal the given value."""
  title_gte: String

  """All values containing the given string."""
  title_contains: String

  """All values not containing the given string."""
  title_not_contains: String

  """All values starting with the given string."""
  title_starts_with: String

  """All values not starting with the given string."""
  title_not_starts_with: String

  """All values ending with the given string."""
  title_ends_with: String

  """All values not ending with the given string."""
  title_not_ends_with: String
  image: String

  """All values that are not equal to given value."""
  image_not: String

  """All values that are contained in given list."""
  image_in: [String!]

  """All values that are not contained in given list."""
  image_not_in: [String!]

  """All values less than the given value."""
  image_lt: String

  """All values less than or equal the given value."""
  image_lte: String

  """All values greater than the given value."""
  image_gt: String

  """All values greater than or equal the given value."""
  image_gte: String

  """All values containing the given string."""
  image_contains: String

  """All values not containing the given string."""
  image_not_contains: String

  """All values starting with the given string."""
  image_starts_with: String

  """All values not starting with the given string."""
  image_not_starts_with: String

  """All values ending with the given string."""
  image_ends_with: String

  """All values not ending with the given string."""
  image_not_ends_with: String
  user: UserWhereInput
  catogory: CatogoryWhereInput
}

input ItemWhereUniqueInput {
  id: ID
}

"""
The `Long` scalar type represents non-fractional signed whole numeric values.
Long can represent values between -(2^63) and 2^63 - 1.
"""
scalar Long

type Mutation {
  createItem(data: ItemCreateInput!): Item!
  createCatogory(data: CatogoryCreateInput!): Catogory!
  createUser(data: UserCreateInput!): User!
  updateItem(data: ItemUpdateInput!, where: ItemWhereUniqueInput!): Item
  updateCatogory(data: CatogoryUpdateInput!, where: CatogoryWhereUniqueInput!): Catogory
  updateUser(data: UserUpdateInput!, where: UserWhereUniqueInput!): User
  deleteItem(where: ItemWhereUniqueInput!): Item
  deleteCatogory(where: CatogoryWhereUniqueInput!): Catogory
  deleteUser(where: UserWhereUniqueInput!): User
  upsertItem(where: ItemWhereUniqueInput!, create: ItemCreateInput!, update: ItemUpdateInput!): Item!
  upsertCatogory(where: CatogoryWhereUniqueInput!, create: CatogoryCreateInput!, update: CatogoryUpdateInput!): Catogory!
  upsertUser(where: UserWhereUniqueInput!, create: UserCreateInput!, update: UserUpdateInput!): User!
  updateManyItems(data: ItemUpdateManyMutationInput!, where: ItemWhereInput): BatchPayload!
  updateManyUsers(data: UserUpdateManyMutationInput!, where: UserWhereInput): BatchPayload!
  deleteManyItems(where: ItemWhereInput): BatchPayload!
  deleteManyCatogories(where: CatogoryWhereInput): BatchPayload!
  deleteManyUsers(where: UserWhereInput): BatchPayload!
}

enum MutationType {
  CREATED
  UPDATED
  DELETED
}

"""An object with an ID"""
interface Node {
  """The id of the object."""
  id: ID!
}

"""Information about pagination in a connection."""
type PageInfo {
  """When paginating forwards, are there more items?"""
  hasNextPage: Boolean!

  """When paginating backwards, are there more items?"""
  hasPreviousPage: Boolean!

  """When paginating backwards, the cursor to continue."""
  startCursor: String

  """When paginating forwards, the cursor to continue."""
  endCursor: String
}

type Query {
  items(where: ItemWhereInput, orderBy: ItemOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Item]!
  catogories(where: CatogoryWhereInput, orderBy: CatogoryOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Catogory]!
  users(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [User]!
  item(where: ItemWhereUniqueInput!): Item
  catogory(where: CatogoryWhereUniqueInput!): Catogory
  user(where: UserWhereUniqueInput!): User
  itemsConnection(where: ItemWhereInput, orderBy: ItemOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): ItemConnection!
  catogoriesConnection(where: CatogoryWhereInput, orderBy: CatogoryOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): CatogoryConnection!
  usersConnection(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): UserConnection!

  """Fetches an object given its ID"""
  node(
    """The ID of an object"""
    id: ID!
  ): Node
}

type Subscription {
  item(where: ItemSubscriptionWhereInput): ItemSubscriptionPayload
  catogory(where: CatogorySubscriptionWhereInput): CatogorySubscriptionPayload
  user(where: UserSubscriptionWhereInput): UserSubscriptionPayload
}

type User implements Node {
  id: ID!
  email: String!
  name: String!
  password: String!
  catogorys(where: CatogoryWhereInput, orderBy: CatogoryOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Catogory!]
  permission: Boolean!
  resetToken: String
  resetTokenExpiry: Float
}

"""A connection to a list of items."""
type UserConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [UserEdge]!
  aggregate: AggregateUser!
}

input UserCreateInput {
  id: ID
  email: String!
  name: String!
  password: String!
  permission: Boolean
  resetToken: String
  resetTokenExpiry: Float
  catogorys: CatogoryCreateManyWithoutUserInput
}

input UserCreateOneInput {
  create: UserCreateInput
  connect: UserWhereUniqueInput
}

input UserCreateOneWithoutCatogorysInput {
  create: UserCreateWithoutCatogorysInput
  connect: UserWhereUniqueInput
}

input UserCreateWithoutCatogorysInput {
  id: ID
  email: String!
  name: String!
  password: String!
  permission: Boolean
  resetToken: String
  resetTokenExpiry: Float
}

"""An edge in a connection."""
type UserEdge {
  """The item at the end of the edge."""
  node: User!

  """A cursor for use in pagination."""
  cursor: String!
}

enum UserOrderByInput {
  id_ASC
  id_DESC
  email_ASC
  email_DESC
  name_ASC
  name_DESC
  password_ASC
  password_DESC
  permission_ASC
  permission_DESC
  resetToken_ASC
  resetToken_DESC
  resetTokenExpiry_ASC
  resetTokenExpiry_DESC
}

type UserPreviousValues {
  id: ID!
  email: String!
  name: String!
  password: String!
  permission: Boolean!
  resetToken: String
  resetTokenExpiry: Float
}

type UserSubscriptionPayload {
  mutation: MutationType!
  node: User
  updatedFields: [String!]
  previousValues: UserPreviousValues
}

input UserSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [UserSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [UserSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [UserSubscriptionWhereInput!]

  """The subscription event gets dispatched when it's listed in mutation_in"""
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: UserWhereInput
}

input UserUpdateDataInput {
  email: String
  name: String
  password: String
  permission: Boolean
  resetToken: String
  resetTokenExpiry: Float
  catogorys: CatogoryUpdateManyWithoutUserInput
}

input UserUpdateInput {
  email: String
  name: String
  password: String
  permission: Boolean
  resetToken: String
  resetTokenExpiry: Float
  catogorys: CatogoryUpdateManyWithoutUserInput
}

input UserUpdateManyMutationInput {
  email: String
  name: String
  password: String
  permission: Boolean
  resetToken: String
  resetTokenExpiry: Float
}

input UserUpdateOneInput {
  create: UserCreateInput
  connect: UserWhereUniqueInput
  disconnect: Boolean
  delete: Boolean
  update: UserUpdateDataInput
  upsert: UserUpsertNestedInput
}

input UserUpdateOneWithoutCatogorysInput {
  create: UserCreateWithoutCatogorysInput
  connect: UserWhereUniqueInput
  disconnect: Boolean
  delete: Boolean
  update: UserUpdateWithoutCatogorysDataInput
  upsert: UserUpsertWithoutCatogorysInput
}

input UserUpdateWithoutCatogorysDataInput {
  email: String
  name: String
  password: String
  permission: Boolean
  resetToken: String
  resetTokenExpiry: Float
}

input UserUpsertNestedInput {
  update: UserUpdateDataInput!
  create: UserCreateInput!
}

input UserUpsertWithoutCatogorysInput {
  update: UserUpdateWithoutCatogorysDataInput!
  create: UserCreateWithoutCatogorysInput!
}

input UserWhereInput {
  """Logical AND on all given filters."""
  AND: [UserWhereInput!]

  """Logical OR on all given filters."""
  OR: [UserWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [UserWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  email: String

  """All values that are not equal to given value."""
  email_not: String

  """All values that are contained in given list."""
  email_in: [String!]

  """All values that are not contained in given list."""
  email_not_in: [String!]

  """All values less than the given value."""
  email_lt: String

  """All values less than or equal the given value."""
  email_lte: String

  """All values greater than the given value."""
  email_gt: String

  """All values greater than or equal the given value."""
  email_gte: String

  """All values containing the given string."""
  email_contains: String

  """All values not containing the given string."""
  email_not_contains: String

  """All values starting with the given string."""
  email_starts_with: String

  """All values not starting with the given string."""
  email_not_starts_with: String

  """All values ending with the given string."""
  email_ends_with: String

  """All values not ending with the given string."""
  email_not_ends_with: String
  name: String

  """All values that are not equal to given value."""
  name_not: String

  """All values that are contained in given list."""
  name_in: [String!]

  """All values that are not contained in given list."""
  name_not_in: [String!]

  """All values less than the given value."""
  name_lt: String

  """All values less than or equal the given value."""
  name_lte: String

  """All values greater than the given value."""
  name_gt: String

  """All values greater than or equal the given value."""
  name_gte: String

  """All values containing the given string."""
  name_contains: String

  """All values not containing the given string."""
  name_not_contains: String

  """All values starting with the given string."""
  name_starts_with: String

  """All values not starting with the given string."""
  name_not_starts_with: String

  """All values ending with the given string."""
  name_ends_with: String

  """All values not ending with the given string."""
  name_not_ends_with: String
  password: String

  """All values that are not equal to given value."""
  password_not: String

  """All values that are contained in given list."""
  password_in: [String!]

  """All values that are not contained in given list."""
  password_not_in: [String!]

  """All values less than the given value."""
  password_lt: String

  """All values less than or equal the given value."""
  password_lte: String

  """All values greater than the given value."""
  password_gt: String

  """All values greater than or equal the given value."""
  password_gte: String

  """All values containing the given string."""
  password_contains: String

  """All values not containing the given string."""
  password_not_contains: String

  """All values starting with the given string."""
  password_starts_with: String

  """All values not starting with the given string."""
  password_not_starts_with: String

  """All values ending with the given string."""
  password_ends_with: String

  """All values not ending with the given string."""
  password_not_ends_with: String
  permission: Boolean

  """All values that are not equal to given value."""
  permission_not: Boolean
  resetToken: String

  """All values that are not equal to given value."""
  resetToken_not: String

  """All values that are contained in given list."""
  resetToken_in: [String!]

  """All values that are not contained in given list."""
  resetToken_not_in: [String!]

  """All values less than the given value."""
  resetToken_lt: String

  """All values less than or equal the given value."""
  resetToken_lte: String

  """All values greater than the given value."""
  resetToken_gt: String

  """All values greater than or equal the given value."""
  resetToken_gte: String

  """All values containing the given string."""
  resetToken_contains: String

  """All values not containing the given string."""
  resetToken_not_contains: String

  """All values starting with the given string."""
  resetToken_starts_with: String

  """All values not starting with the given string."""
  resetToken_not_starts_with: String

  """All values ending with the given string."""
  resetToken_ends_with: String

  """All values not ending with the given string."""
  resetToken_not_ends_with: String
  resetTokenExpiry: Float

  """All values that are not equal to given value."""
  resetTokenExpiry_not: Float

  """All values that are contained in given list."""
  resetTokenExpiry_in: [Float!]

  """All values that are not contained in given list."""
  resetTokenExpiry_not_in: [Float!]

  """All values less than the given value."""
  resetTokenExpiry_lt: Float

  """All values less than or equal the given value."""
  resetTokenExpiry_lte: Float

  """All values greater than the given value."""
  resetTokenExpiry_gt: Float

  """All values greater than or equal the given value."""
  resetTokenExpiry_gte: Float
  catogorys_every: CatogoryWhereInput
  catogorys_some: CatogoryWhereInput
  catogorys_none: CatogoryWhereInput
}

input UserWhereUniqueInput {
  id: ID
  email: String
}
